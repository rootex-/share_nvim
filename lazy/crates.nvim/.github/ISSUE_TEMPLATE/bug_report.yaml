name: Bug report
description: Report a problem with crates.nvim
labels: [bug]
body:
  - type: markdown
    attributes:
      value: >
        Before reporting make sure that both crates.nvim and its dependencies are
        updated to the latest version.
  - type: textarea
    attributes:
      label: "Description"
      description: "A comprehensive description of the problem you are reporting."
    validations:
      required: true
  - type: input
    attributes:
      label: "Neovim version"
      description: |
        Output of `nvim --version`
    validations:
      required: true
  - type: input
    attributes:
      label: "Health check"
      description: |
        Output of `:checkhealth crates`
    validations:
      required: true
  - type: input
    attributes:
      label: "Operating system and version"
    validations:
      required: true
  - type: textarea
    attributes:
      label: "Expected behavior"
      description: "A description of the behavior you expected:"
  - type: textarea
    attributes:
      label: "Actual behavior"
      description: "Observed behavior (may optionally include logs, images, or videos)."
    validations:
      required: true
  - type: textarea
    attributes:
      label: "Minimal config"
      description: >
        Minimal(!) configuration necessary to reproduce the issue. Save this as
        `minimal.lua`. If necessary, add plugins and config options from your
        `init.lua` at the indicated lines. Neovim can then be started with this
        config by running `nvim -u minimal.lua`.
      render: lua
      value: |
        -- comment out, and add the things that are _necessary_ for reproducing the ISSUE
        for name, url in pairs({
            crates = "https://github.com/saecki/crates.nvim",
            -- cmp = "https://github.com/hrsh7th/nvim-cmp",
            -- coq = "https://github.com/ms-jpq/coq_nvim",
            -- null_ls = "https://github.com/jose-elias-alvarez/null-ls.nvim",
        }) do
            local install_path = vim.fn.fnamemodify("crates_issue/" .. name, ":p")
            if vim.fn.isdirectory(install_path) == 0 then
                vim.notify("cloning " .. url .. " into " .. install_path)
                vim.fn.system({ "git", "clone", "--depth=1", url, install_path })
            end
            vim.opt.runtimepath:append(install_path)
        end

        require("crates").setup({
            completion = {
                -- cmp = { enabled = true },
                -- coq = { enabled = true },
            },
            -- null_ls = { enabled = true },
        })

        -- require("cmp").setup({
        -- 	sources = { { name = "crates" } },
        -- })

        -- require("null-ls").setup({
        -- 	on_attach = function(client, buf)
        -- 		vim.keymap.set("n", "<space>a", vim.lsp.buf.code_action, { buffer = buf })
        -- 	end,
        -- })
    validations:
      required: true
  - type: textarea
    attributes:
      label: "Cargo.toml"
      description: "The problematic `Cargo.toml` file"
    validations:
      required: true
  - type: textarea
    attributes:
      label: "Steps to reproduce"
      description: "Steps to reproduce using the minimal config provided."
      value: |
        1. `nvim --clean -u minimal.lua`
        2. ...
    validations:
      required: true
