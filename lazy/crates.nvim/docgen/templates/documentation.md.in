Documentation for `crates.nvim` `<VERSION>`

# Features
- Complete crate names, versions and features using one of:
    - In-process language server (`lsp`)
    - [nvim-cmp](https://github.com/hrsh7th/nvim-cmp) source (`completion.cmp`)
    - [coq.nvim](https://github.com/ms-jpq/coq_nvim) source (`completion.coq`)
- Code actions using one of:
    - In-process language server (`lsp`)
    - [null-ls.nvim](https://github.com/jose-elias-alvarez/null-ls.nvim)/[none-ls.nvim](https://github.com/nvimtools/none-ls.nvim)
- Update crates to newest compatible version
- Upgrade crates to newest version
- Respect existing version requirements and update them in an elegant way (`smart_insert`)
- Show version and upgrade candidates
    - Show if compatible version is a pre-release or yanked
    - Show if no version is compatible
- Open popup with crate info
    - Open documentation, crates.io, repository and homepage urls
- Open popup with crate versions
    - Select a version by pressing enter (`popup.keys.select`)
- Open popup with crate features
    - Navigate the feature hierarchy
    - Enable/disable features
    - Indicate if a feature is enabled directly or transitively
- Open popup with crate dependencies
    - Navigate the dependency hierarchy
    - Show `normal`, `build` and `dev` dependencies
    - Show optional dependencies
- Project-local configuration via [Neoconf](https://github.com/folke/neoconf.nvim)

# Setup

## In-process language server
This is the recommended way to enable completion and code actions.

Enable the in-process language server in the setup and select whether to enable
code actions, auto completion and hover.
```lua
require("crates").setup {
    ...
    lsp = {
        enabled = true,
        on_attach = function(client, bufnr)
            -- the same on_attach function as for your other lsp's
        end,
        actions = true,
        completion = true,
        hover = true,
    },
}
```

## Auto completion
Completion is supported in a few different ways, either by the [in-process language server](#in-process-language-server),
which also supports code actions, or by one of the following sources.

### [nvim-cmp](https://github.com/hrsh7th/nvim-cmp) source

Enable it in the setup.
```lua
require("crates").setup {
    ...
    completion = {
        ...
        cmp = {
            enabled = true,
        },
    },
}
```

And add it to your list of sources.
```lua
require("cmp").setup {
    ...
    sources = {
        { name = "path" },
        { name = "buffer" },
        { name = "nvim_lsp" },
        ...
        { name = "crates" },
    },
}
```

<details>
<summary>Or add it lazily.</summary>

```lua
vim.api.nvim_create_autocmd("BufRead", {
    group = vim.api.nvim_create_augroup("CmpSourceCargo", { clear = true }),
    pattern = "Cargo.toml",
    callback = function()
        cmp.setup.buffer({ sources = { { name = "crates" } } })
    end,
})
```
</details>

<details>
<summary>Custom nvim-cmp completion kinds</summary>

Enable custom completion kind in the config.
```lua
require("crates").setup {
    ...
    completion = {
        ...
        cmp = {
            use_custom_kind = true,
            -- optionally change the text and highlight groups
            kind_text = {
                version = "Version",
                feature = "Feature",
            },
            kind_highlight = {
                version = "CmpItemKindVersion",
                feature = "CmpItemKindFeature",
            },
        },
    },
}
```
This will set a custom completion `cmp.kind_text` and `cmp.kind_hl_group` attributes
to completion items for `nvim-cmp`.

Depending on how you've set up [the nvim-cmp menu](https://github.com/hrsh7th/nvim-cmp/wiki/Menu-Appearance#basic-customisations)
you'll have to handle these explicitly.
If you haven't changed `nvim-cmp`s `formatting` configuration everything should work out of the box.

Here's an example of how add custom icons.
```lua
local kind_icons = {
    ["Class"] = "ðŸ…’ ",
    ["Interface"] = "ðŸ…˜ ",
    ["TypeParameter"] = "ðŸ…£ ",
    ["Struct"] = "ðŸ…¢ ",
    ["Enum"] = "ðŸ…” ",
    ["Unit"] = "ðŸ…¤ ",
    ["EnumMember"] = "ðŸ…” ",
    ["Constant"] = "ðŸ…’ ",
    ["Field"] = "ðŸ…• ",
    ["Property"] = "ðŸ…Ÿ ",
    ["Variable"] = "ðŸ…¥ ",
    ["Reference"] = "ðŸ…¡ ",
    ["Function"] = "ðŸ…• ",
    ["Method"] = "ðŸ…œ ",
    ["Constructor"] = "ðŸ…’ ",
    ["Module"] = "ðŸ…œ ",
    ["File"] = "ðŸ…• ",
    ["Folder"] = "ðŸ…• ",
    ["Keyword"] = "ðŸ…š ",
    ["Operator"] = "ðŸ…ž ",
    ["Snippet"] = "ðŸ…¢ ",
    ["Value"] = "ðŸ…¥ ",
    ["Color"] = "ðŸ…’ ",
    ["Event"] = "ðŸ…” ",
    ["Text"] = "ðŸ…£ ",

    -- crates.nvim extensions
    ["Version"] = "ðŸ…¥ ",
    ["Feature"] = "ðŸ…• ",
}

require("cmp").setup({
    formatting = {
        fields = { "abbr", "kind" },
        format = function(_, vim_item)
            vim_item.kind = kind_icons[vim_item.kind] or "  "
            return vim_item
        end,
    },
})
```
</details>

### [coq.nvim](https://github.com/ms-jpq/coq_nvim) source
Enable it in the setup, and optionally change the display name.
```lua
require("crates").setup {
    ...
    completion = {
        ...
        coq = {
            enabled = true,
            name = "crates.nvim",
        },
    },
}
```

### Crate name completion

Crate names in dependencies can be completed from searches on `crates.io`. This has to be
enabled seperately:

```lua
require("crates").setup {
    ...
    completion = {
        crates = {
            enabled = true -- disabled by default
            max_results = 8 -- The maximum number of search results to display
            min_chars = 3 -- The minimum number of charaters to type before completions begin appearing
        }
    }
}
```

## Code actions
Code actions are supported in a few different ways, either by the [in-process language server](#in-process-language-server),
which also supports completion, or by the null-ls/none-ls source.

### [null-ls.nvim](https://github.com/jose-elias-alvarez/null-ls.nvim)/[none-ls.nvim](https://github.com/nvimtools/none-ls.nvim) source
Enable it in the setup, and optionally change the display name.
```lua
require("crates").setup {
    ...
    null_ls = {
        enabled = true,
        name = "crates.nvim",
    },
}
```

# Config

For more information about the config types have a look at the vimdoc or [`lua/crates/config/types.lua`](https://github.com/Saecki/crates.nvim/blob/main/lua/crates/config/types.lua).

## Default

The icons in the default configuration require a patched font.<br>
Any [Nerd Font](https://www.nerdfonts.com/font-downloads) should work.
```lua
require("crates").setup {
    <SHARED:DEFAULT_CONFIGURATION>
}
```

## Plain text

Replace these fields if you don"t have a patched font.
```lua
require("crates").setup {
    <SHARED:plain_text_config.lua>
}
```

## Functions
```lua
<SHARED:FUNCTIONS>
```

## Command
```vim
:Crates <subcmd>
```
Run a crates.nvim `<subcmd>`. All `<subcmd>`s are just wrappers around the
corresponding functions. These are the functions available as commands:
<SHARED:SUBCOMMANDS>

## Key mappings
Some examples of key mappings.
```lua
<SHARED:keymaps.lua>
```

<details>
<summary>In vimscript</summary>

```vim
<SHARED:keymaps.vim>
```
</details>

## Show appropriate documentation in `Cargo.toml`
> [!NOTE]
> If you're using the in-process language server and `lsp.hover` is enabled, this isn't necessary.

How you might integrate `show_popup` into your `init.lua`.
```lua
<SHARED:show_docs.lua>
```

<details>
<summary>How you might integrate `show_popup` into your `init.vim`.</summary>

```vim
<SHARED:show_docs.vim>
```
</details>

## neoconf.nvim integration

You can also set project-local settings if you have [neoconf.nvim](https://github.com/folke/neoconf.nvim)
installed; all settings are exactly the same, but are by default under the "crates" namespace.

Neoconf integration has to be enabled, and optionally the namespace can be changed.
```lua
require("crates").setup {
    ...
    neoconf = {
        enabled = false,
        namespace = "crates",
    },
}
```

Example:

```jsonc
// .neoconf.json

{
    //...
    "crates": {
        "smart_insert": false,
        "max_parallel_requests": 50,
        "completion": {
            "crates": {
                "enabled": false
            }
        }
    }
}
```
